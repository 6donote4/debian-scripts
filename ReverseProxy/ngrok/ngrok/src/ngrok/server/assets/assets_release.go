// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x93\xc9\xee\xb2\x48\x1f\x46\xf7\x5c\xc5\xb7\x37\x5f\x98\x1d\x16\xbd\xf8\x51\x55\x40\x31\xc9\x28\xe0\x4e\x2d\x04\x04\xff\x88\xc8\x20\x57\xdf\x79\xdf\xa4\x87\xa4\x9f\xe5\x79\x92\xb3\x3b\xff\xff\x35\x8d\x18\xd4\xfb\x1f\x22\x61\x4c\x75\x8a\x20\x26\xbf\x29\xe7\x52\x8a\x5e\x18\x21\xc8\x67\x84\x02\xd4\xc6\x3f\xee\x84\x94\xc7\xa7\x7b\x80\xa7\x95\x4d\x5f\x35\xb5\x71\x98\x05\x0d\x82\x41\x07\x0c\x89\x1b\xd2\x99\x40\x8e\x4f\x41\x80\x31\xb4\x0d\x77\x95\xd4\x89\x19\xc9\xc8\x8c\x61\x36\xab\x9b\xe7\xc6\xb7\xc5\xc5\xf4\xeb\x3e\xc8\xea\xad\xee\x9c\x56\x37\xcf\xc3\xc9\xec\xae\xa0\xfe\xcd\x1e\xff\x88\xb8\xbf\x4c\xff\x16\x95\x25\xa9\x5d\x10\x0c\x14\xf5\x46\x44\xaf\x32\x0e\x88\x06\x41\x02\xa0\x50\x0d\xcf\xf0\xeb\xb7\xa1\xa3\x1a\x04\x38\xe3\x0a\x67\x65\xfc\xe5\x2c\x64\xd3\x75\x35\xec\x1d\xda\x30\xe3\x72\x92\xc4\xa7\x48\x74\xaa\x4f\xdb\xbc\x12\x04\x51\xf5\x67\x2b\x1b\x65\x26\xa7\x7d\xb8\xbe\xf7\xc7\x77\x01\x62\x01\x4a\x37\x65\x90\x70\x69\x92\x9a\xd1\xd2\x98\x87\x9e\x50\x68\xf2\x32\x4c\x34\x2c\xd9\xba\x7c\x1a\x7d\xf5\x5e\x2b\xb2\xa4\xa7\xaf\xc0\x79\xf7\x2f\x66\xa7\x9b\x5b\xcb\x40\x6a\xdf\x7b\x89\x3a\x89\x8d\xa4\x5d\xb8\xea\x9c\x4f\x26\x07\xd9\xeb\xab\x05\x7c\xbb\xca\xf8\xcb\x7f\x24\x62\x64\xb7\x66\xf0\x1a\x9a\x27\xa1\x72\x3a\x8b\xc7\x9d\x29\x0c\x2c\x1b\xef\xcf\x56\xfe\x24\xa5\x66\x3c\x7f\xa2\x5e\xaf\x22\x93\xdf\xd7\x26\xb7\x55\x42\x4f\x95\xbb\x25\x39\xa5\xc6\x65\x94\x76\x87\x7b\xbf\x0a\x19\xab\x16\xb8\x5b\xf7\xdc\x9f\x8a\x69\xb3\x1d\xeb\x23\xcf\xa2\x84\x87\x7c\x7a\x2c\x65\xa2\x7c\x84\x17\xdd\xfb\x8e\x96\x1c\x6a\x91\x73\xa4\x30\x30\x4c\x69\x63\xc4\xc7\x9b\xb1\xe8\x9a\x22\x46\xe2\xba\xcd\x18\xbf\x34\x66\xca\xf7\x3e\xaa\x53\x7c\x6f\xe2\x75\xb4\x9a\xa3\x76\x8c\x9f\x90\xf9\x36\x75\x0b\x47\xfb\xb1\x36\xcd\xae\x77\x38\xf8\xe9\xab\xed\xb6\xb2\xaf\xfd\x6a\xcd\xc7\xdd\xe9\x2a\xa8\x0b\x94\xae\x06\x40\x66\x1c\xe4\x96\xdd\x9d\x69\x35\xdd\x3c\x08\x88\xa3\x05\x80\xcb\x92\x68\x40\xb2\x65\x40\x6f\xd7\xd7\xe3\x89\xa3\xa4\xce\xeb\x42\xdb\x0d\xfa\x5b\xa7\x92\x22\xb6\xc7\x32\x84\x5a\x21\x66\xf4\xb8\xb5\x5a\x95\xee\x58\xb9\xbc\xad\x23\x0b\x51\x88\xc3\x20\x6e\x95\xa5\x3f\x34\x3c\xef\xa5\x5e\x0a\x67\xa7\x32\xb9\xd4\xfb\xec\x3e\x77\x53\x56\x73\x99\xdd\x83\xf6\x6e\xa7\x41\x11\x48\x2c\x9f\xea\x15\xbe\x91\x8d\x9e\xf5\x65\x9f\xb6\x97\xef\x5e\x50\x06\xa4\x26\xa3\xfc\xc8\x0b\x67\x7f\x08\xef\x06\x8c\x5f\x5a\x8c\x5c\x8d\x66\xd2\x34\xe9\x33\xb3\x75\x57\x1d\x0a\x34\x59\xdf\x79\x2d\xe5\xb3\xc8\xcb\x51\x43\x82\x61\x74\x3b\x72\x50\x40\x73\xc6\x6d\xdd\x97\xc7\xc6\xb7\x66\xf1\xb1\x32\x15\xb1\x7e\x1e\x4c\x1f\x71\xab\xd4\x3d\x3e\xa7\x0b\xef\x3f\x97\xa8\x55\x47\xf7\x50\x1a\x1b\xe3\x07\xf3\x86\x8e\x79\xbe\x0e\x84\x88\x49\xa2\xda\x55\xbb\x53\x30\xd8\x60\xe9\x02\xfa\xf4\xec\x13\xc3\xa3\x2f\x41\xba\x38\x67\x9e\xeb\x3f\x44\xe4\x6f\xa5\x58\x75\x6c\xaf\xa8\x67\xfa\x2d\xec\x13\xcf\xf8\x90\xb8\x12\xee\xe6\x00\xf8\xa7\x28\x3a\xdf\x73\x6d\xe3\x3d\xfb\xa6\xe8\x7a\xa1\xd9\x59\x88\x55\x0b\xe9\x2f\x27\x55\xd3\x0d\xf7\x54\xba\x41\x89\x43\x65\x55\x86\x3f\xb8\xdf\x81\x12\x0f\xff\x37\xda\x3f\x03\x00\x00\xff\xff\xa7\x3e\x9f\x97\xd1\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 977, mode: os.FileMode(420), modTime: time.Unix(1508708250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd5\xb7\x12\xab\xda\x01\x85\xe1\x9e\xa7\x38\x3d\xe3\x41\x80\xb4\x81\xc2\xc5\x26\x83\xc8\x19\x3a\x04\x22\x47\x91\x79\x7a\xcf\x3d\x6e\xef\x6a\x57\xf3\x77\xdf\x7f\xfe\x19\x2b\x48\x8a\xf1\xc7\x71\xe1\x1f\xcb\x51\x02\xe8\x09\x7f\xde\x42\xfc\xf7\x41\x74\x45\x11\xc6\x52\x61\x21\x7c\x73\xd0\x16\x20\x4e\xd6\x34\x59\x10\x7d\x2e\x52\x04\x7d\xd6\xdb\xb1\x0f\x4e\xdf\xe5\x6b\xb2\x3a\xac\xcb\x7e\xd0\x5e\xc9\x0d\xe3\xeb\xd1\x5c\x40\xad\x64\x8e\xcf\x48\x9b\x01\x8c\x9f\xc9\xd2\x88\x4a\xf3\xad\xe1\x87\x28\x76\x62\xf5\x58\x12\x16\x4b\x2b\x0e\xaa\x92\x22\x04\xd0\x66\xea\x2a\xc7\x3f\x0d\x1a\x3d\x37\x83\xa9\x82\xd9\xe7\x00\x98\x23\xb7\xdb\x07\x15\x89\x6c\x63\x4a\x31\xa3\xe6\x70\xae\x5c\xb7\x47\x76\x7a\xa7\x76\x1d\xf5\x02\x12\x1b\x92\x12\x73\xd0\x3b\x95\x57\x6c\x47\xaa\x1a\x9f\x70\x92\x28\x7c\xc5\x30\xf7\xb6\x93\xd1\xe4\x80\x1a\x5e\x53\x8e\x50\x81\x02\x9d\x69\x7a\xcc\x55\xec\x57\x18\xa6\x54\xe8\x26\x78\xdf\x1c\xe8\x81\x18\x54\xfd\x6f\xdd\xb0\x08\x2c\x8c\x48\xc6\x99\x2d\x5f\x11\xc1\x53\xe4\x0f\xdb\x7e\x63\xb3\x93\x7e\x67\x1d\x92\x86\x3c\xe9\x58\x34\xb5\xfc\xed\x5a\xfc\x75\x04\x56\xbc\xba\x4c\xeb\xb3\x15\xb3\x57\xed\x3d\xb0\x8b\x63\x7f\x0d\x7f\xcd\xd0\x8e\x2c\xe8\x84\xc5\x77\xd0\x1c\x63\x57\x92\x2f\x81\xa6\xea\x84\x2f\xbd\x16\x79\x95\xe2\x7d\xd5\xbc\x5c\x1f\xc9\x55\x4c\x26\xa8\x0f\x15\x8c\xdf\x6d\x74\x7b\xb0\x5c\x19\xbf\xe1\x21\x63\x66\xb6\xc2\x43\x1b\xb2\x70\x54\x58\x28\x9a\x18\xed\x0a\xde\xe3\x3c\x4c\xdb\x3f\x4e\x64\x5f\xcd\x27\xc7\x77\x52\xc4\xa6\xca\x0d\x7e\x44\xe3\xb8\x40\x6a\xd1\x2e\x69\x7c\x60\x26\xd5\x8e\x8b\x1d\x27\xd0\x54\x81\xcb\x9a\x47\x71\x1e\x39\x19\xe1\x4d\xbb\xeb\xcc\xb3\x5b\xe7\xa0\x05\x81\xc0\x96\x34\x77\x8b\xaf\xd9\x4f\x85\xb2\xb2\x13\x0b\xec\xed\x2e\x22\xbf\x41\xab\x59\x13\x47\xf9\xf4\xb3\x1c\x34\x73\x6e\x91\x1e\x35\x8f\xeb\x23\x82\xa3\xc7\x6b\x28\x10\x37\xea\x0b\x4c\x8e\xc1\x11\x2c\xc0\xba\xb1\x51\x3c\x83\xf1\x39\x1e\xf6\xe6\x6d\xd2\xf4\x4d\xdd\xa0\x50\x1b\xb9\xaa\x79\x0b\x1c\x25\x41\x14\xd5\x11\x87\x61\x6f\x32\xd1\x6b\xf2\xf3\xed\x4d\xc7\xbc\xa2\x16\x0d\x93\x1f\x1f\x64\xb2\xeb\x5e\x44\xf1\x9d\x2b\x33\x87\x61\x5f\x0d\xc9\xb1\xe7\xef\xb5\x9c\xee\x89\x55\xfc\x6e\xea\xc3\x4b\x46\x03\xc2\x27\xf4\x3e\x77\x08\x79\xbf\xf5\xae\x50\x1e\x68\x06\xf3\x0e\x5e\xfa\xe4\xfe\x90\xe8\x77\x08\x3f\xf4\xea\x29\xae\xb6\xb3\x86\xa2\x82\x03\x9f\x9c\xaf\xf6\x38\x43\x12\xfa\xf6\x8a\x3b\xb2\xdd\x77\x73\x6b\xa6\x11\x59\x84\x45\x00\x0d\xb6\xfb\x1a\x04\xa7\xdd\x89\xbd\x80\x43\xf4\x90\x83\xae\x69\xb1\x14\xb8\x32\x16\x20\x16\xa4\xae\x4f\x25\x72\x5e\xb6\xac\x2c\xdd\x35\xc9\x98\xef\x85\xe0\x07\x7f\xee\x12\xb3\xc8\xa4\xee\x33\xee\x3f\x16\x2f\xc1\xe7\x3d\x51\xef\x90\x46\x6f\xc3\x47\x1e\x78\x1e\xce\xab\x95\xe3\xeb\x96\x1a\x34\xf3\x9d\xe4\xc1\x9d\x99\xc6\xaa\x9c\x35\x5a\x5a\xea\x85\x9b\x0f\xd6\xcd\x4f\xf9\x13\x67\x01\x0a\x53\x98\xb6\x2f\xd8\x56\xe3\x8d\x3a\xc0\x61\xd2\x39\x43\x6e\xb7\xc8\xa2\xf3\x6a\x6b\x39\x3f\xcd\xc8\x52\x03\x3d\xab\xee\x65\x4d\xea\xd7\xe1\xfa\x63\x20\xc6\x12\x58\x71\x2f\x5e\xf4\x6f\x58\xcc\xab\x2a\x17\xd2\xaf\xcf\x88\xff\x17\x13\x9f\xd3\x46\xc4\x45\xe2\x22\xc2\x9f\x52\xaf\x8d\x5e\xbe\xf2\x7a\x98\x03\xc7\xdd\xdc\x29\xd7\xb5\x2f\x27\xb7\x21\x4e\xa8\xb6\x85\x17\xc3\x9f\x14\x4b\xbd\x55\xfc\x9e\x13\x74\xe3\xdd\x6e\x3f\xf1\x23\x81\xca\x07\xc9\x88\xcf\xe3\xa5\x3a\x7d\xa4\xc9\x6e\xee\x00\x40\xe2\x0a\xea\x86\xe5\xa3\x8b\x66\xea\xf4\x1e\xc1\xd3\xd5\xf6\x1f\x7b\xb7\x92\x2a\xa6\x9c\x9d\xb1\x1f\xab\xd6\x98\x44\xb3\x9e\x35\x76\xfa\xf1\x33\x44\x48\x95\x58\xc4\xdb\xf5\x78\xed\x92\x92\xfd\x37\xc0\xe8\xa0\xd6\xe3\xa6\xd3\xaf\x2c\x71\x53\x13\xbf\x9a\x33\x3e\x9d\x7f\x92\x61\x1d\xf5\xab\xd1\x95\x4f\xe3\xd1\xdd\x83\x19\xa8\x97\xe2\x46\x36\x82\x55\x21\x4f\x76\xdb\x5e\xc9\x1f\xc3\x7c\x1c\x69\x3c\x46\x97\x37\x90\xa2\xc0\x2e\xa9\xe7\x05\xf8\x63\x74\xe8\x6f\x8f\x62\x6a\x40\x60\xcb\xc8\x24\xe9\xde\xeb\xbb\x1e\x5f\x45\x3a\x56\xc2\x6b\xd7\x90\x77\x53\x56\x35\x6b\x65\x93\x13\x5d\xaf\xf3\xd3\xe3\xae\x37\x7c\xfc\x2b\x3f\xa4\x1f\x81\x73\x61\x31\x3e\xbf\x98\xf0\xac\xaf\x73\xed\xb9\xc2\x88\xfc\x22\x5e\xf1\x21\xf9\x39\xa1\x69\x47\x19\xaa\x67\x48\x6f\xe7\xa1\xa3\x8e\x8b\xb7\x84\x55\xc3\x9a\xfa\x3c\x96\xb2\x62\xbf\xd9\x52\xd2\xee\xab\x52\x8c\xcf\x73\xfe\x88\x1b\xe5\x49\x80\x67\x34\xac\x4b\x8e\xed\xc9\xa1\xfb\xe6\x9c\x11\xb0\x76\xc1\xe7\x91\xdb\xb5\x31\x72\xd9\x9f\xc1\xd0\xeb\x5f\x40\xf4\xb7\x0d\x81\x66\x75\x3d\x0f\xa2\xe6\xf7\x88\x35\x5e\xe4\xf0\xf2\x8d\xee\x87\x4e\x4c\x71\x62\xeb\xb9\xac\x3c\x61\x48\x1a\x6d\x54\xa5\x70\x44\x25\x64\x76\x42\xf2\xfd\x52\xbf\xbb\xe4\x18\xcf\x1f\x46\x05\x26\x34\x05\x75\xaf\xc9\x42\x78\x7f\xeb\x2e\x91\x57\x57\x47\xb9\x3c\x99\xba\x85\xd8\xa8\x20\x91\xa4\xa9\x4c\xe4\x24\xb5\x2c\xd0\x00\x8e\x02\x88\x57\x10\x2c\x1c\x25\x98\x83\xc5\x68\x6c\x41\x0e\x2a\xc0\x95\x54\x6f\xc5\x42\x96\x97\xc6\x46\x15\x4b\x8f\x5b\x47\x8d\x7e\x27\x7d\x59\x63\x7d\x2d\xc1\xdb\x27\x5f\xa9\x39\x5c\x68\x3d\xb4\xc3\x8e\xf4\xa9\xfc\x90\x4a\x18\x90\x72\x11\x24\xd6\x42\x13\x73\xd3\xe9\x5d\xda\xa8\x66\xce\x7a\xac\xdb\x74\x66\x10\x94\xad\x98\xb5\x87\x46\xa0\xe9\xd6\x96\xc3\xb7\xa6\x01\xf8\x14\x7d\x82\x55\xe9\xe0\x20\xbb\x41\x6a\x46\x83\x9b\x5b\x6f\x72\x59\xa1\xcf\xba\xf6\x56\x33\x93\xb3\xf6\x24\xb4\xe9\xac\x98\xd0\x73\xc9\xf9\xb7\x8b\x16\xc2\x98\x53\x85\xb3\x5d\xa3\xfd\x5f\xe4\x2f\x29\x82\xc1\xff\x3b\x35\xff\x0b\x00\x00\xff\xff\xbc\x6e\x2d\x53\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1508708250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

